# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\pyqt5\LID\demo.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are d
import audio_recorder
import xlrd
import csv
import os
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QTableWidget, QTableWidgetItem, QPushButton,
    QMenu, QFileDialog, QAction, QTextEdit,QDialog,QMessageBox , QSizePolicy,QComboBox,QWidget, QHBoxLayout, QLabel
)
from PyQt5.QtMultimedia import QAudioRecorder, QAudioEncoderSettings
from PyQt5.QtCore import QUrl, QDir
import pandas as pd 
from threading import Timer
import openpyxl
from PyQt5.QtCore import QObject,QThread,pyqtSlot
from PyQt5.QtCore import pyqtSignal as Signal


class Ui_MainWindow(object):
    global stop_insertion
    global timers
    stop_insertion=False
    timers=[]
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(803, 713)
     
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 10, 803, 681))
        self.frame.setStyleSheet("")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(70, 10, 611, 51))
        
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(24)
        font.setItalic(True)
        self.label.setFont(font)
        self.label.setAutoFillBackground(True)
        self.label.setStyleSheet("color:darkblue")
        self.label.setFrameShape(QtWidgets.QFrame.Box)
        self.label.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        
        self.liverecordButton = QtWidgets.QPushButton(self.frame)
        self.liverecordButton.setGeometry(QtCore.QRect(60, 90, 200, 41))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(12)
        self.liverecordButton.setFont(font)
        self.liverecordButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.liverecordButton.setAutoFillBackground(False)
        self.liverecordButton.setStyleSheet("QPushButton{\n"
"color:white;\n"
"background-color:skyblue;\n"
"border-radius:10;\n"
"}\n"
"QPushButton:hover{\n"
"background-color:rgb(73, 185, 255);\n"
"color: rgb(4, 9, 103);\n"
"}")
        self.liverecordButton.setAutoDefault(False)
        self.liverecordButton.setDefault(False)
        self.liverecordButton.setFlat(False)
        self.liverecordButton.setObjectName("liverecordButton")
        self.liverecordButton.clicked.connect(self.show_audio_recording_dialog)

        self.resultTab = QtWidgets.QTabWidget(self.frame)
        self.resultTab.setGeometry(QtCore.QRect(300, 160, 461, 431))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.resultTab.setFont(font)
        self.resultTab.setStyleSheet("color:royalblue")
        self.resultTab.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.resultTab.setElideMode(QtCore.Qt.ElideLeft)
        self.resultTab.setDocumentMode(True)
        self.resultTab.setTabsClosable(False)
        self.resultTab.setMovable(True)
        self.resultTab.setObjectName("resultTab")
        self.tab_1 = QtWidgets.QWidget()
        self.tab_1.setObjectName("tab_1")
        self.resultTable = QtWidgets.QTableWidget(self.tab_1)
        self.resultTable.setGeometry(QtCore.QRect(-1, 0, 461, 401))
        font = QtGui.QFont()
        font.setFamily("Gadugi")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.resultTable.setFont(font)
        self.resultTable.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.resultTable.setStyleSheet("color:black")
        self.resultTable.setRowCount(0)
        self.resultTable.setObjectName("resultTable")
        self.resultTable.setColumnCount(3)
        item = QtWidgets.QTableWidgetItem()
        self.resultTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.resultTable.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.resultTable.setHorizontalHeaderItem(2, item)
        self.resultTable.setColumnWidth(0,250) 
        self.resultTable.setColumnWidth(1,148) 
        self.resultTable.setColumnWidth(2,120)
        self.resultTab.addTab(self.tab_1, "")
        
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.resultTable_2 = QtWidgets.QTableWidget(self.tab_2)
        self.resultTable_2.setGeometry(QtCore.QRect(-1, 0, 461, 401))
        self.resultTable_2.setObjectName("resultTable_2")
        self.resultTable_2.setColumnCount(5)
        self.resultTable_2.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.resultTable_2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.resultTable_2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.resultTable_2.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.resultTable_2.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.resultTable_2.setHorizontalHeaderItem(4, item)
        self.resultTab.addTab(self.tab_2, "")
        
        self.clearButton = QtWidgets.QPushButton(self.frame)
        self.clearButton.setGeometry(QtCore.QRect(660, 90, 93, 41))
        font = QtGui.QFont()
        font.setFamily("MS Serif")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.clearButton.setFont(font)
        self.clearButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.clearButton.setStyleSheet("QPushButton{\n"
"color:royalblue;\n"
"border-radius:15;\n"
"background-color:white;\n"
"}\n"
"QPushButton:hover{\n"
"background-color:qlineargradient(spread:pad, x1:0.215789, y1:0.188, x2:1, y2:1, stop:0.568421 rgba(85, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));\n"
"}")
        self.clearButton.setObjectName("clearButton")
        self.clearButton.clicked.connect(self.clear_button_clicked)
        
        self.runButton = QtWidgets.QPushButton(self.frame)
        self.runButton.setGeometry(QtCore.QRect(310, 90, 90, 41))
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.runButton.setFont(font)
        self.runButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.runButton.setStyleSheet("QPushButton{\n"
"color:royalblue;\n"
"border-radius:15;\n"
"background-color:white;\n"
"}\n"
"QPushButton:hover{\n"
"background-color:qconicalgradient(cx:0, cy:0, angle:135, stop:0 rgba(255, 255, 0, 69), stop:0.375 rgba(255, 255, 0, 69), stop:0.423533 rgba(251, 255, 0, 145), stop:0.45 rgba(247, 255, 0, 208), stop:0.477581 rgba(255, 244, 71, 130), stop:0.518717 rgba(255, 218, 71, 130), stop:0.55 rgba(255, 255, 0, 255), stop:0.57754 rgba(255, 203, 0, 130), stop:0.625 rgba(255, 255, 0, 69), stop:1 rgba(255, 255, 0, 69));\n"
"}\n"
"")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("C:\\Users\\pyqt5\\LID\\Icons/runIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.runButton.setIcon(icon)
        self.runButton.setIconSize(QtCore.QSize(33, 35))
        self.runButton.setObjectName("runButton")
        self.runButton.clicked.connect(self.run_button_clicked)
        
        self.stopButton = QtWidgets.QPushButton(self.frame)
        self.stopButton.setGeometry(QtCore.QRect(420, 90, 90, 41))
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.stopButton.setFont(font)
        self.stopButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.stopButton.setStyleSheet("QPushButton{\n"
"color:royalblue;\n"
"border-radius:15;\n"
"background-color:white;\n"
"}\n"
"QPushButton:hover{\n"
"background-color:qlineargradient(spread:pad, x1:0.321053, y1:0.318, x2:1, y2:1, stop:0 rgba(255, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));\n"
"color:darkblue;\n"
"}")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("C:\\Users\\pyqt5\\LID\\Icons/stop.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.stopButton.setIcon(icon1)
        self.stopButton.setIconSize(QtCore.QSize(28, 28))
        self.stopButton.setObjectName("stopButton")
        self.stopButton.clicked.connect(self.stop_button_clicked)
        
        self.saveButton = QtWidgets.QPushButton(self.frame)
        self.saveButton.setGeometry(QtCore.QRect(560, 90, 93, 41))
        font = QtGui.QFont()
        font.setFamily("MS Serif")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.saveButton.setFont(font)
        self.saveButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.saveButton.setStyleSheet("QPushButton{\n"
"color:royalblue;\n"
"background-color:qlineargradient(spread:pad, x1:0.795, y1:0.727273, x2:1, y2:1, stop:0 rgba(170, 255, 127, 255), stop:1 rgba(255, 255, 255, 255));\n"
"border-radius:15;\n"
"}\n"
"QPushButton:hover{\n"
"color:darkgreen;\n"
"}")
        self.saveButton.setObjectName("saveButton")
        self.saveButton.clicked.connect(self.save_button_clicked)
        
        self.filesTab = QtWidgets.QTabWidget(self.frame)
        self.filesTab.setGeometry(QtCore.QRect(36, 160, 250, 431))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.filesTab.setFont(font)
        self.filesTab.setStyleSheet("color:royalblue")
        self.filesTab.setDocumentMode(False)
        self.filesTab.setTabBarAutoHide(False)
        self.filesTab.setObjectName("filesTab")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.filesTable = QtWidgets.QTableWidget(self.tab)
        self.filesTable.setGeometry(QtCore.QRect(-1, 0, 250, 401))
    
        font = QtGui.QFont()
        font.setFamily("Gadugi")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.filesTable.setFont(font)
        self.filesTable.setStyleSheet("color:black;")
        self.filesTable.setObjectName("filesTable")
        self.filesTable.setColumnCount(2)
        self.filesTable.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.filesTable.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.filesTable.setHorizontalHeaderItem(1, item)
        self.filesTable.setColumnWidth(0,200) 
        self.filesTable.setColumnWidth(1,50)
        self.filesTab.addTab(self.tab, "")
        self.add_plus_symbol()
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 803, 26))
        self.menubar.setObjectName("menubar")
        self.menuFIle = QtWidgets.QMenu(self.menubar)
        self.menuFIle.setObjectName("menuFIle")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.actionHelp = QtWidgets.QAction(MainWindow)
        self.actionHelp.setObjectName("actionHelp")
        self.actionNew_Folder = QtWidgets.QAction(MainWindow)
        self.actionNew_Folder.setObjectName("actionNew_Folder")
        self.actionOpen_File = QtWidgets.QAction(MainWindow)
        self.actionOpen_File.setObjectName("actionOpen_File")
        self.actionOpen_FOlder = QtWidgets.QAction(MainWindow)
        self.actionOpen_FOlder.setObjectName("actionOpen_FOlder")
        self.actionHistory = QtWidgets.QAction(MainWindow)
        self.actionHistory.setObjectName("actionHistory")

        self.saveButton.setEnabled(False)
        self.clearButton.setEnabled(False)
        self.runButton.setEnabled(False)
        self.stopButton.setEnabled(False)
        
        self.menuFIle.addAction(self.actionHelp)
        self.menuFIle.addAction(self.actionNew_Folder)
        self.menuFIle.addAction(self.actionOpen_File)
        self.menuFIle.addAction(self.actionOpen_FOlder)
        self.menubar.addAction(self.menuFIle.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.resultTab.setCurrentIndex(0)
        self.filesTab.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "LANGUAGE IDENTIFIER"))
        self.liverecordButton.setText(_translate("MainWindow", "Live Record"))
        item = self.resultTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "File "))
        item = self.resultTable.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Language"))
        item = self.resultTable.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Confidence"))
        self.resultTab.setTabText(self.resultTab.indexOf(self.tab_1), _translate("MainWindow", "RESULTS"))
        item = self.resultTable_2.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "File"))
        item = self.resultTable_2.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Language1"))
        item = self.resultTable_2.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Confidence1"))
        item = self.resultTable_2.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Language2"))
        item = self.resultTable_2.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Confidence2"))
        self.resultTab.setTabText(self.resultTab.indexOf(self.tab_2), _translate("MainWindow", "DETAILS"))
        self.clearButton.setText(_translate("MainWindow", "CLEAR"))
        self.runButton.setText(_translate("MainWindow", "RUN"))
        self.stopButton.setText(_translate("MainWindow", "STOP"))
        self.saveButton.setText(_translate("MainWindow", "SAVE"))
        item = self.filesTable.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "File"))
        self.filesTab.setTabText(self.filesTab.indexOf(self.tab), _translate("MainWindow", "SELECTED FILES"))
        self.menuFIle.setTitle(_translate("MainWindow", "FIle"))
        self.menuView.setTitle(_translate("MainWindow", "History"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionHelp.setText(_translate("MainWindow", "New File"))
        self.actionNew_Folder.setText(_translate("MainWindow", "New Folder"))
        self.actionOpen_File.setText(_translate("MainWindow", "Open File"))
        self.actionOpen_FOlder.setText(_translate("MainWindow", "Open Folder"))
        self.actionHistory.setText(_translate("MainWindow", "History"))


    def add_plus_symbol(self):
        row_position = self.filesTable.rowCount()
        self.filesTable.insertRow(row_position)
        self.spinner = QComboBox()
        self.spinner.addItem("select upload")
        self.spinner.addItem("Upload File")
        self.spinner.addItem("Upload Folder")
        self.spinner.currentTextChanged.connect(self.spinner_selected)
        self.filesTable.setCellWidget(row_position, 0, self.spinner)

    def spinner_selected(self, text):
        if text == "Upload File":
            self.upload_file()
        elif text == "Upload Folder":
            self.upload_folder()
    '''def add_plus_symbol(self):
        row_position = self.filesTable.rowCount()
        self.filesTable.insertRow(row_position)
        self.button = QPushButton(" + ")
        self.button.clicked.connect(lambda:self.show_menu(self.button))
        self.filesTable.setCellWidget(row_position,0,self.button)


    def show_menu(self,button):
        #upload_file= QIcon("file.jpeg")
        menu = QMenu()

        upload_file_action = QAction("Upload File")
        upload_file_action.triggered.connect(self.upload_file)
        upload_folder_action = QAction("Upload Folder")
        upload_folder_action.triggered.connect(self.upload_folder)

        menu.addAction(upload_file_action)
        menu.addAction(upload_folder_action)

    
        menu.exec_(button.mapToGlobal(button.rect().bottomLeft()))'''



    def upload_file(self):
        print("Upload file clicked")
        file_name, _ = QFileDialog.getOpenFileName(None, "Upload File", filter="MP3 files (*.mp3);WAV fies(*.wav)")
        if file_name:
            self.add_file_to_table([file_name])

    def upload_folder(self):
        print("Upload folder clicked")
        folder_name = QFileDialog.getExistingDirectory(None, "Upload Folder")
        if folder_name:
            file_paths = [
                os.path.join(folder_name, f) for f in os.listdir(folder_name)
                if os.path.isfile(os.path.join(folder_name, f)) and (f.lower().endswith('.mp3') or f.lower().endswith('.wav')) 
            ]
            non_mp3_files = [
                f for f in os.listdir(folder_name)
                if os.path.isfile(os.path.join(folder_name, f)) and not (f.lower().endswith('.mp3') or f.lower().endswith('.wav'))
            ]
            if non_mp3_files:
                self.statusbar.showMessage(f"Selected folder '{os.path.basename(folder_name)}' has non-MP3 files which will not be processed: {', '.join(non_mp3_files)}")
            self.add_file_to_table(file_paths)
    
    def remove_plus_symbol(self):
        row_position = self.filesTable.rowCount()-1
        print(row_position)
        if row_position >= 0 :
            self.filesTable.removeCellWidget(row_position, 0)
            self.filesTable.removeRow(row_position)
            print("plus_button_removed")


    def add_file_to_table(self, file_paths):
        self.remove_plus_symbol()
        self.statusbar.showMessage(" ")
        for file_path in file_paths:
            file_name = os.path.basename(file_path)
            file_size = os.path.getsize(file_path)
            row_position = self.filesTable.rowCount()
            self.filesTable.insertRow(row_position)
            
            # Create a horizontal box layout for the first column
            layout = QHBoxLayout()
            label = QLabel(f"{file_name} ({file_size} bytes)")
            delete_button = QPushButton("×")  # Use a cross mark instead of "Delete"
            delete_button.setFixedSize(20, 20)  # Set the size of the cross button
            delete_button.clicked.connect(lambda checked, file_name=file_name: self.delete_file(file_name))
            layout.addWidget(label)
            layout.addWidget(delete_button)
            widget = QWidget()
            widget.setLayout(layout)
            self.filesTable.setCellWidget(row_position, 0, widget)
            
            # Remove the other columns
            self.filesTable.removeColumn(1)
            self.filesTable.removeColumn(2)
        self.add_plus_symbol()
        if self.filesTable.rowCount() > 1:
            self.runButton.setEnabled(True)
        else:
            self.runButton.setEnabled(False)
    
    
    '''def add_file_to_table(self, file_paths):
        self.remove_plus_symbol()
        self.statusbar.showMessage(" ")
        for file_path in file_paths:
            file_name = os.path.basename(file_path)
            file_size = os.path.getsize(file_path)
            row_position = self.filesTable.rowCount()
            self.filesTable.insertRow(row_position)
            self.filesTable.setItem(row_position, 0, QTableWidgetItem(f"{file_name}({file_size}bytes)"))
            
            # Add delete button to the third column
            delete_button = QPushButton("X")
            delete_button.clicked.connect(lambda checked, row=row_position: self.delete_file(row_position))
            self.filesTable.setCellWidget(row_position, 2, delete_button)
        self.add_plus_symbol()
        if self.filesTable.rowCount()>1:
            self.runButton.setEnabled(True)
        else:
            self.runButton.setEnabled(False)'''
        
    def delete_file(self, file_name):
        # Confirm deletion with a message box
        reply = QMessageBox.question(self.centralwidget, 'Delete File', 'Are you sure you want to delete this file?',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            for row in range(self.filesTable.rowCount()):
                widget = self.filesTable.cellWidget(row, 0)
                layout = widget.layout()
                label = layout.itemAt(0).widget()
                file_label_text = label.text().split(' (')[0]
                if file_label_text == file_name:
                    self.filesTable.removeRow(row)
                    break
    def populate_table(self):
        global stop_insertion
        global timers
        if stop_insertion:
            return

        data = pd.read_excel("LID_RESULT.xls")

        def insert_row(i):
            global stop_insertion 
            if i >= len(data) or stop_insertion:
                if i>=len(data):
                     self.statusbar.showMessage("files processed")
                else:
                     self.statusbar.showMessage("processing has been stopped externally")
                return  # Stop after all rows are inserted
            if i <= len(data) and  stop_insertion==False:
                filename_item = QtWidgets.QTableWidgetItem(data.loc[i, 'Filename'])
                language_item1 = QtWidgets.QTableWidgetItem(data.loc[i, 'Language1'])
                confidence_item1= QtWidgets.QTableWidgetItem(str(data.loc[i, 'Confidence1']))
                self.resultTable.setRowCount(self.resultTable.rowCount() + 1)
                self.resultTable.setItem(i, 0, filename_item)
                self.resultTable.setItem(i, 1, language_item1)
                self.resultTable.setItem(i, 2, confidence_item1)
                self.resultTable.update()
                self.resultTable.scrollToBottom()
                filename_item = QtWidgets.QTableWidgetItem(data.loc[i, 'Filename'])
                language_item1 = QtWidgets.QTableWidgetItem(data.loc[i, 'Language1'])
                confidence_item1= QtWidgets.QTableWidgetItem(str(data.loc[i, 'Confidence1']))
                language_item2= QtWidgets.QTableWidgetItem(data.loc[i, 'Language2'])
                confidence_item2 = QtWidgets.QTableWidgetItem(str(data.loc[i, 'Confidence2']))
                self.resultTable_2.setRowCount(self.resultTable_2.rowCount() + 1)
                self.resultTable_2.setItem(i, 0, filename_item)
                self.resultTable_2.setItem(i, 1, language_item1)
                self.resultTable_2.setItem(i, 2, confidence_item1)
                self.resultTable_2.setItem(i, 3, language_item2)
                self.resultTable_2.setItem(i, 4, confidence_item2)
                self.resultTable_2.update()
                self.resultTable_2.scrollToBottom()
                # Schedule next row insertion with 5 seconds delay
                timer = Timer(2.0, lambda: insert_row(i + 1))
                timer.start()

        # Start inserting the first row
        timer=Timer(2.0,lambda:insert_row(0))
        timers.append(timer)
        timer.start()

    def run_button_clicked(self):
         self.saveButton.setEnabled(False)
         self.clearButton.setEnabled(False)
         self.stopButton.setEnabled(True)
         self.runButton.setEnabled(False)
         if self.filesTable.rowCount()>1:
                 self.statusbar.showMessage("files processing")
                 # Schedule population with 5 seconds delay
                 timer = Timer(3.0, self.populate_table)
                 timer.start()
         else:
                  self.statusbar.showMessage("no files selected")

    def stop_button_clicked(self):
        self.saveButton.setEnabled(True)
        self.clearButton.setEnabled(True)
        self.runButton.setEnabled(True)
        self.stopButton.setEnabled(False)
        global stop_insertion
        print("stop_button_clicked")
        stop_insertion=True
        for timer in timers:
            timer.cancel()
        timers.clear()

        
    def clear_button_clicked(self):
        self.saveButton.setEnabled(False)
        self.clearButton.setEnabled(False)
        self.runButton.setEnabled(True)
        self.stopButton.setEnabled(False)
        self.statusbar.showMessage("results have been cleared")
        self.resultTable.setRowCount(0)
        self.resultTable_2.setRowCount(0)
        
    def save_to_csv(self, filename, table):
        """Saves the data from the provided table to a CSV file.

        Returns:
            True on success, False on failure.
        """
        try:
            with open(filename, 'w', newline='') as csvfile:
                csv_writer = csv.writer(csvfile)

                # Write header row
                header_row = []
                for col in range(table.columnCount()):
                    header_row.append(table.horizontalHeaderItem(col).text())
                csv_writer.writerow(header_row)

                # Write data rows
                for row in range(table.rowCount()):
                    data_row = []
                    for col in range(table.columnCount()):
                        item = table.item(row, col)
                        if item:
                            data_row.append(item.text())
                        else:
                            data_row.append("")  # Handle empty cells
                    csv_writer.writerow(data_row)
            return True  # Indicate successful save
        except Exception as e:
            print("Error", f"Failed to save file: {e}")
            MainWindow.statusbar.showMessage("Failed to save file", 2000)
            return False  # Indicate failure

    

    def save_button_clicked(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        if self.resultTable.rowCount()>0:
             fileName, _ = QFileDialog.getSaveFileName(None, "Save Results", "", "Excel Files (*.xlsx);;All Files (*)", options=options)
             if fileName:
                if self.save_to_csv(fileName, self.resultTable_2):
                    print("successfully saved")
                    self.statusbar.showMessage("File saved successfully", 2000)
                else:
                    print("error not saved")
                    self.statusbar.showMessage("Failed to save file", 2000)
        else:
             self.statusbar.showMessage("no data to save")

    def show_audio_recording_dialog(self):
        self.statusbar.showMessage("recording")
        dialog = audio_recorder.AudioRecorderDialog()
        dialog.file_saved.connect(self.on_file_saved)
        dialog.exec_()
    def on_file_saved(self, filename):
        self.add_file_to_table([filename])


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
